import mongoose from 'mongoose';
import app from '../../../app';
import supertest from 'supertest';
import config from '../../../Config/config';
import { BlogModel } from '../../../Models/BlogModel';
import MOCK_DATA from './MOCK_DATA';

const api = supertest(app);
let blog_to_delete = {};

beforeAll(async () => {
  await mongoose.connect(config.determineURI());
  await BlogModel.deleteMany({});
  const res = await BlogModel.create(MOCK_DATA.blog_list);
  blog_to_delete = res[0];
  await mongoose.disconnect();
});

describe('DELETE /api/blogs/:id', () => {
  test('a delete request succeeds when `id` is valid', async () => {
    // setup
    const id = blog_to_delete._id.toString();

    // execute
    const response_valid_id = await api
      .delete(`/api/blogs/${id}`)
      .expect(200)
      .expect('Content-Type', /application\/json/);
    const response_updated_blog_list = await api.get('/api/blogs').expect(200);
    // verify
    expect(response_valid_id.body.success).toBe(true);
    expect(response_valid_id.body.deleted_data).toEqual({
      title: blog_to_delete.title,
      author: blog_to_delete.author,
      url: blog_to_delete.url,
      likes: blog_to_delete.likes,
      id,
    });
    expect(response_updated_blog_list.body.length).toBe(
      MOCK_DATA.blog_list.length - 1
    );
  });
  test('a delete request fails when `id` is malformed', async () => {
    // setup
    const malformed_id = 'invalid_id';

    // execute
    const response_malformed_id = await api
      .delete(`/api/blogs/${malformed_id}`)
      .expect(400);

    // verify
    expect(response_malformed_id.body.type).toBe('CastError');
  });
  test('a delete request fails when `id` is valid but does not exist', async () => {
    // assume that the valid id below will not be generated by mongodb
    const id_that_does_not_exist = '64cf48e8e8c2a37ae2d55fc5';

    // execute
    const response = await api
      .delete(`/api/blogs/${id_that_does_not_exist}`)
      .expect(400);

    // verify
    expect(response.body.message).toBe(
      'Bad Request. The `id` to be deleted does not exist'
    );
  });
});
